name: Create Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version'
        required: true

env:
  BUILD_TYPE: Release
  CPM_SOURCE_CACHE: ${{ github.workspace }}/cpm_modules
  TARGET: RPGMPacker

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: true
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
    - uses: actions/checkout@v2
    - uses: actions/cache@v2
      with:
        path: "**/cpm_modules"
        key: ${{ github.workflow }}-cpm-modules-${{ runner.os }}-${{ hashFiles('**/CMakeLists.txt', '**/*.cmake') }}

    - name: Create Build Environment
      run: cmake -E make_directory ${{github.workspace}}/build

    - name: Configure CMake
      shell: bash
      working-directory: ${{github.workspace}}/build
      run: cmake -S $GITHUB_WORKSPACE -B . -DCMAKE_BUILD_TYPE=$BUILD_TYPE

    - name: Build
      working-directory: ${{github.workspace}}/build
      shell: bash
      run: cmake --build . --config $BUILD_TYPE --target $TARGET
    
    - name: Upload Artifact - Windows
      if: matrix.os == 'windows-latest'
      uses: actions/upload-artifact@v2
      with:
        name: build-windows
        path: ${{github.workspace}}/build/${{ env.BUILD_TYPE }}/${{ env.TARGET}}.exe
        if-no-files-found: error
    - name: Upload Artifact - Linux
      if: matrix.os == 'ubuntu-latest'
      uses: actions/upload-artifact@v2
      with:
        name: build-linux
        path: ${{github.workspace}}/build/${{ env.TARGET }}
        if-no-files-found: error
    - name: Upload Artifact - macOS
      if: matrix.os == 'macos-latest'
      uses: actions/upload-artifact@v2
      with:
        name: build-macos
        path: ${{github.workspace}}/build/${{ env.TARGET }}
        if-no-files-found: error

  publish:
    needs: [build]
    runs-on: ubuntu-latest
    steps:
    - name: Get version from input
      id: tag_name
      shell: bash
      env:
        INPUT_VERSION: ${{ github.event.inputs.version }}
      run: |
        echo ::set-output name=current_version::${INPUT_VERSION}
    
    - uses: actions/checkout@v2
  
    - name: Get Changelog Entry
      id: changelog_reader
      uses: mindsers/changelog-reader-action@v2
      with:
        version: ${{ steps.tag_name.outputs.current_version }}
        path: ./CHANGELOG.md

    - uses: actions/download-artifact@v2
      with:
        name: build-windows
        path: out/Windows/
    - uses: actions/download-artifact@v2
      with:
        name: build-linux
        path: out/Linux/
    - uses: actions/download-artifact@v2
      with:
        name: build-macos
        path: out/macOS/

    - name: Rename
      shell: bash
      run: |
        mv out/Windows/${{ env.TARGET }}.exe out/${{ env.TARGET}}-Windows.exe
        mv out/Linux/${{ env.TARGET }} out/${{ env.TARGET }}-Linux
        mv out/macOS/${{ env.TARGET }} out/${{ env.TARGET }}-macOS

    - name: Create Release
      id: create_release
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
      with:
        tag_name: v${{ steps.changelog_reader.outputs.version }}
        name: Release ${{ steps.changelog_reader.outputs.version }}
        body: ${{ steps.changelog_reader.outputs.changes }}
        draft: ${{ steps.changelog_reader.outputs.status == 'unreleased' }}
        prerelease: ${{ steps.changelog_reader.outputs.status == 'prereleased' }}
        files: "out/*"
